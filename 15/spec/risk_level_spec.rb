require 'rspec'
require '../risk_level.rb'

describe "#dijsktra" do
  # to do - write test for this method
  context "with basic AoC sample grid" do
    it "returns the shortest path, 40" do
     grid = [ [1,1,6,3,7,5,1,7,4,2],
              [1,3,8,1,3,7,3,6,7,2],
              [2,1,3,6,5,1,1,3,2,8],
              [3,6,9,4,9,3,1,5,6,9],
              [7,4,6,3,4,1,7,1,1,1],
              [1,3,1,9,1,2,8,1,3,7],
              [1,3,5,9,9,1,2,4,2,1],
              [3,1,2,5,4,2,1,6,3,9],
              [1,2,9,3,1,3,8,5,2,1],
              [2,3,1,1,9,4,4,5,8,1] ]

      result = dijsktra(grid)
      expect(result).to eq(40)
    end
  end

  context "with expanded AoC sample grid" do
    it "returns the shortest path, 315" do
            target =
     [[1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6],
      [1,3,8,1,3,7,3,6,7,2,2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6],
      [2,1,3,6,5,1,1,3,2,8,3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3],
      [3,6,9,4,9,3,1,5,6,9,4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4],
      [7,4,6,3,4,1,7,1,1,1,8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5],
      [1,3,1,9,1,2,8,1,3,7,2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2],
      [1,3,5,9,9,1,2,4,2,1,2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5],
      [3,1,2,5,4,2,1,6,3,9,4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4],
      [1,2,9,3,1,3,8,5,2,1,2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5],
      [2,3,1,1,9,4,4,5,8,1,3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5],
      [2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7],
      [2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7],
      [3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4],
      [4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5],
      [8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6],
      [2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3],
      [2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6],
      [4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5],
      [2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6],
      [3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6],
      [3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8],
      [3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8],
      [4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5],
      [5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6],
      [9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7],
      [3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4],
      [3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7],
      [5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6],
      [3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7],
      [4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7],
      [4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9],
      [4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9],
      [5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6],
      [6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7],
      [1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8],
      [4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5],
      [4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8],
      [6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7],
      [4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8],
      [5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8],
      [5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9,9,9,5,2,6,4,9,6,3,1],
      [5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9,9,2,7,9,2,6,2,5,6,1],
      [6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6,1,9,2,5,4,9,9,2,1,7],
      [7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7,2,5,8,3,8,2,9,4,5,8],
      [2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8,6,3,5,2,3,9,6,9,9,9],
      [5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5,9,2,9,8,9,1,7,9,2,6],
      [5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8,9,2,4,8,8,9,1,3,1,9],
      [7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7,2,9,1,4,3,1,9,5,2,8],
      [5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8,9,1,8,2,9,2,7,4,1,9],
      [6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8,1,2,9,9,8,3,3,4,7,9]]

      shortest =  dijsktra(target)
      expect(shortest).to eq(315)
    end
  end

  context "with grid that forces you to hinge backwards" do
    it "returns the shortest path, 12" do

      grid = [[1,1,1,1,1,9],
              [9,9,9,9,1,9],
              [9,9,9,1,1,9],
              [9,9,9,1,9,9],
              [9,9,9,1,1,9],
              [9,9,9,9,1,1]]

      shortest = dijsktra(grid)

      expect(shortest).to eq(12)
    end
  end

end

describe "#grid_generator"  do
  context "with basic grid" do
    it "returns a new expanded grid" do


      grid = [[8]]
      target = [[8, 9, 1, 2, 3],
                [9, 1, 2, 3, 4],
                [1, 2, 3, 4, 5],
                [2, 3, 4, 5, 6],
                [3, 4, 5, 6, 7]]

      expanded = grid_generator(grid)
      expect(expanded).to eq(target)
    end
  end

  context "with the basic AoC examples" do
    it "returns a new expanded grid" do
      grid = [
        [1,1,6,3,7,5,1,7,4,2],
        [1,3,8,1,3,7,3,6,7,2],
        [2,1,3,6,5,1,1,3,2,8],
        [3,6,9,4,9,3,1,5,6,9],
        [7,4,6,3,4,1,7,1,1,1],
        [1,3,1,9,1,2,8,1,3,7],
        [1,3,5,9,9,1,2,4,2,1],
        [3,1,2,5,4,2,1,6,3,9],
        [1,2,9,3,1,3,8,5,2,1],
        [2,3,1,1,9,4,4,5,8,1]
      ]

      target =
     [[1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6],
      [1,3,8,1,3,7,3,6,7,2,2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6],
      [2,1,3,6,5,1,1,3,2,8,3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3],
      [3,6,9,4,9,3,1,5,6,9,4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4],
      [7,4,6,3,4,1,7,1,1,1,8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5],
      [1,3,1,9,1,2,8,1,3,7,2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2],
      [1,3,5,9,9,1,2,4,2,1,2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5],
      [3,1,2,5,4,2,1,6,3,9,4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4],
      [1,2,9,3,1,3,8,5,2,1,2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5],
      [2,3,1,1,9,4,4,5,8,1,3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5],
      [2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7],
      [2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7],
      [3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4],
      [4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5],
      [8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6],
      [2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3],
      [2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6],
      [4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5],
      [2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6],
      [3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6],
      [3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8],
      [3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8],
      [4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5],
      [5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6],
      [9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7],
      [3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4],
      [3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7],
      [5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6],
      [3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7],
      [4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7],
      [4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9],
      [4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9],
      [5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6],
      [6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7],
      [1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8],
      [4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5],
      [4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8],
      [6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7],
      [4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8],
      [5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8],
      [5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9,9,9,5,2,6,4,9,6,3,1],
      [5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9,9,2,7,9,2,6,2,5,6,1],
      [6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6,1,9,2,5,4,9,9,2,1,7],
      [7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7,2,5,8,3,8,2,9,4,5,8],
      [2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8,6,3,5,2,3,9,6,9,9,9],
      [5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5,9,2,9,8,9,1,7,9,2,6],
      [5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8,9,2,4,8,8,9,1,3,1,9],
      [7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7,2,9,1,4,3,1,9,5,2,8],
      [5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8,9,1,8,2,9,2,7,4,1,9],
      [6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8,1,2,9,9,8,3,3,4,7,9]]

      expanded = grid_generator(grid)
      expect(expanded).to eq(target)
    end
  end
end

describe "#graph_generator" do
  context "with a simple grid" do
    it "generates a hashmap that references the nodes and the edges" do
      graph_arr = [[1,1,9],
                   [9,1,9],
                   [9,1,1]]

      graph = graph_generator(graph_arr)
      res = {
        0 => [ [1, 1], [3, 9]],
        1 =>  [[0, 1], [2, 9], [4, 1]],
        2 => [ [1, 1], [5, 9]],
        3 => [ [0, 1], [4, 1], [6,9]],
        4 => [ [3,9], [1, 1], [5, 9], [7, 1]],
        5 => [ [4,1], [2,9], [8, 1]],
        6 => [ [3, 9], [7,1]],
        7 => [ [6, 9], [4, 1], [8, 1]],
        8 => [ [7, 1], [5,9]]
      }

      graph.each_pair do |key, value|
        expect(graph[key].sort).to eq(res[key].sort)
      end
    end
  end
end


describe "#dijsktra" do
  # to do - write test for this method
  context "with basic AoC sample grid" do
    it "returns the shortest path, 40" do
     grid = [ [1,1,6,3,7,5,1,7,4,2],
              [1,3,8,1,3,7,3,6,7,2],
              [2,1,3,6,5,1,1,3,2,8],
              [3,6,9,4,9,3,1,5,6,9],
              [7,4,6,3,4,1,7,1,1,1],
              [1,3,1,9,1,2,8,1,3,7],
              [1,3,5,9,9,1,2,4,2,1],
              [3,1,2,5,4,2,1,6,3,9],
              [1,2,9,3,1,3,8,5,2,1],
              [2,3,1,1,9,4,4,5,8,1] ]

      result = dijsktra(grid)
      expect(result).to eq(40)
    end
  end

  context "with expanded AoC sample grid" do
    it "returns the shortest path, 315" do
            target =
     [[1,1,6,3,7,5,1,7,4,2,2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6],
      [1,3,8,1,3,7,3,6,7,2,2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6],
      [2,1,3,6,5,1,1,3,2,8,3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3],
      [3,6,9,4,9,3,1,5,6,9,4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4],
      [7,4,6,3,4,1,7,1,1,1,8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5],
      [1,3,1,9,1,2,8,1,3,7,2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2],
      [1,3,5,9,9,1,2,4,2,1,2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5],
      [3,1,2,5,4,2,1,6,3,9,4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4],
      [1,2,9,3,1,3,8,5,2,1,2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5],
      [2,3,1,1,9,4,4,5,8,1,3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5],
      [2,2,7,4,8,6,2,8,5,3,3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7],
      [2,4,9,2,4,8,4,7,8,3,3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7],
      [3,2,4,7,6,2,2,4,3,9,4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4],
      [4,7,1,5,1,4,2,6,7,1,5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5],
      [8,5,7,4,5,2,8,2,2,2,9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6],
      [2,4,2,1,2,3,9,2,4,8,3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3],
      [2,4,6,1,1,2,3,5,3,2,3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6],
      [4,2,3,6,5,3,2,7,4,1,5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5],
      [2,3,1,4,2,4,9,6,3,2,3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6],
      [3,4,2,2,1,5,5,6,9,2,4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6],
      [3,3,8,5,9,7,3,9,6,4,4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8],
      [3,5,1,3,5,9,5,8,9,4,4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8],
      [4,3,5,8,7,3,3,5,4,1,5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5],
      [5,8,2,6,2,5,3,7,8,2,6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6],
      [9,6,8,5,6,3,9,3,3,3,1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7],
      [3,5,3,2,3,4,1,3,5,9,4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4],
      [3,5,7,2,2,3,4,6,4,3,4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7],
      [5,3,4,7,6,4,3,8,5,2,6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6],
      [3,4,2,5,3,5,1,7,4,3,4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7],
      [4,5,3,3,2,6,6,7,1,3,5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7],
      [4,4,9,6,1,8,4,1,7,5,5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9],
      [4,6,2,4,6,1,6,9,1,5,5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9],
      [5,4,6,9,8,4,4,6,5,2,6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6],
      [6,9,3,7,3,6,4,8,9,3,7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7],
      [1,7,9,6,7,4,1,4,4,4,2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8],
      [4,6,4,3,4,5,2,4,6,1,5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5],
      [4,6,8,3,3,4,5,7,5,4,5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8],
      [6,4,5,8,7,5,4,9,6,3,7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7],
      [4,5,3,6,4,6,2,8,5,4,5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8],
      [5,6,4,4,3,7,7,8,2,4,6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8],
      [5,5,1,7,2,9,5,2,8,6,6,6,2,8,3,1,6,3,9,7,7,7,3,9,4,2,7,4,1,8,8,8,4,1,5,3,8,5,2,9,9,9,5,2,6,4,9,6,3,1],
      [5,7,3,5,7,2,7,1,2,6,6,8,4,6,8,3,8,2,3,7,7,9,5,7,9,4,9,3,4,8,8,1,6,8,1,5,1,4,5,9,9,2,7,9,2,6,2,5,6,1],
      [6,5,7,1,9,5,5,7,6,3,7,6,8,2,1,6,6,8,7,4,8,7,9,3,2,7,7,9,8,5,9,8,1,4,3,8,8,1,9,6,1,9,2,5,4,9,9,2,1,7],
      [7,1,4,8,4,7,5,9,1,4,8,2,5,9,5,8,6,1,2,5,9,3,6,1,6,9,7,2,3,6,1,4,7,2,7,1,8,3,4,7,2,5,8,3,8,2,9,4,5,8],
      [2,8,1,7,8,5,2,5,5,5,3,9,2,8,9,6,3,6,6,6,4,1,3,9,1,7,4,7,7,7,5,2,4,1,2,8,5,8,8,8,6,3,5,2,3,9,6,9,9,9],
      [5,7,5,4,5,6,3,5,7,2,6,8,6,5,6,7,4,6,8,3,7,9,7,6,7,8,5,7,9,4,8,1,8,7,8,9,6,8,1,5,9,2,9,8,9,1,7,9,2,6],
      [5,7,9,4,4,5,6,8,6,5,6,8,1,5,5,6,7,9,7,6,7,9,2,6,6,7,8,1,8,7,8,1,3,7,7,8,9,2,9,8,9,2,4,8,8,9,1,3,1,9],
      [7,5,6,9,8,6,5,1,7,4,8,6,7,1,9,7,6,2,8,5,9,7,8,2,1,8,7,3,9,6,1,8,9,3,2,9,8,4,1,7,2,9,1,4,3,1,9,5,2,8],
      [5,6,4,7,5,7,3,9,6,5,6,7,5,8,6,8,4,1,7,6,7,8,6,9,7,9,5,2,8,7,8,9,7,1,8,1,6,3,9,8,9,1,8,2,9,2,7,4,1,9],
      [6,7,5,5,4,8,8,9,3,5,7,8,6,6,5,9,9,1,4,6,8,9,7,7,6,1,1,2,5,7,9,1,8,8,7,2,2,3,6,8,1,2,9,9,8,3,3,4,7,9]]

      shortest =  end_routes([0,0], target)
      expect(shortest - target[0][0]).to eq(315)
    end
  end

  context "with grid that forces you to hinge backwards" do
    it "returns the shortest path, 12" do
      grid = [[1,1,1,1,1,9],
              [9,9,9,9,1,9],
              [9,9,9,1,1,9],
              [9,9,9,1,9,9],
              [9,9,9,1,1,9],
              [9,9,9,9,1,1]]

      shortest =  dijsktra(grid)
      expect(shortest).to eq(12)
    end
  end

end
